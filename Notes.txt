########################## Getting Started ##########################

--> django-admin: This command will give the other available commands.
--> To create a new project: django-admin startproject django-project
This will create below folders/files,
manage.py	==> This is how our web applicaion can be used through command line interface.
__init__.py	==> This is the empty file, used for python identifying it as a python package.
settings.py	==> This file contains all the config settings such as apps, debug, DB,security key, etc.
urls.py		==> This file contains the url mapping of the website.
wsgi.py		==> Web application and web server communicates through this file.
asgi.py		==> 
--> To start the server, python manage.py runserver. The server will be up & application will be available in 127.0.0.1:8000 or localhost:8000.
--> By default, the admin page is configured in django & can be accessed through localhost:8000/admin. But there is no default credentials & it should be configured.

########################## Applications and Routes ##########################

--> To create a app: python manage.py startapp blog
--> urls.py file needs to be created within the app folder (This will not be created by default). 
--> To create the simple web page, the logic is,
User --> project url --> app url -->views.py
--> In views.py file, the HttpResponse has to be imported from dango.http & the function should accept request & return http response.
--> In app urls.py file,  1)url as string 2) module.function_name it has to be referred 3) any unique name
--> In project urls.py file, the include function has to be imported from django.urls & the url matching shoulg go to include function (app url in string)
--> It is always better to use trailing slash in urls.

########################## Templates ##########################

--> Tempates folder should be created under applicaion. Inside the templates folder, another folder should be created with app name.Below are the Django convention for templates structure.
blog -> templates -> blog -> html files
--> In order to Django recognises templates & Databases, the Class in apps.py file should be pointed in installed apps section in settings.py file. Format: 'app_name.file_name(apps).class_name_in_apps.py_file'
--> To map templates folder with views.py file, render function can be used. render function returns same HttpResponse by taking 3 arguments such as request, 'app_name_in_templates_folder/html_file' and name of the data dictionary.
--> Create a tempory data by creating a list of dictionaries and also, create a dictionary within function & it contains the value as the variable of the temp data. Once this is set, the key name will be accebile with the data insite templates folder .
--> Templating engine Django uses is Jinger2. To use any loops, 
{% for i in x %}
{{ i }}
{% endfor %}
The appropriate tags can be given.
--> To use bootstrap, use CDN links in base.html so that it can take effect on complete website.
--> To use css & JS files, create the folder in blog folder, then create a folder with the name of the app inside the static folder, then create files inside.
--> To point the css files in base.html, create a code block on top with load static keyword. Then, in a link tag, open another code block, {% static "path" %}
--> To use the dynamic urls in the headers, in a code block, pass the name that was created in function views.py file. {% url 'blog-home' %}

########################## Admin page ##########################

--> python manage.py makemigration & python manage.py migrate
--> To create admin user: python manage.py createsuperuser 
--> Django comes with inbuilt admin page.

########################## Database and Migrations ##########################

--> Django contains inbuilt ORM (Object Relational Mapper) whice means we no need to write a sql query separaely (will be done automatically).
--> In models.py file in app folder, Each class created will be a table in DB. note: User table is created by default & import it from django.contrib.auth.models
--> Crate a class which takes models.Model as a input parameter & each variable assigned will be a column in DB table.
--> Few crieteria are CharField, TextField & DateTimeField and Foreign key can be set by mapping with other table.
--> After running python manage.py makemigrations, "blog\migrations\0001_initial.py" one file will be created similar to this.
--> To view SQL query corresponding to this class, use "python manage.py sqlmigrate blog 0001". Then, python manage.py migrate should be run.
--> To open DB shell, python manage.py shell & import both User and Post.
--> To view existing users, User.objects.all() -> This will return a query set. Other methods instead of all() are first() & last(). Also. filter(username='test') can be used. Also, it is possible to get data by column names like User.objects.set(id=1).
--> TO create a post through DB shell,
post_1 = Post(title='Blog 1', content='Test content for Blog 1!', author=user)
To make this effect, run post_1.save() Note: This is similar to Commit key word in SQL after running update query. 
--> If Post.objects.all() was run, it retuns with object. To make it configure properly, use __str__ method in models.py file. 
--> To fetch all post written by user, user = User.objects.filter(username='Gokul').first()
user.post_set.all() --> This will list all the post written by User.
--> It is possible to create a post directly from here by user.post_set.create(title='Blog 3', content='Test content for Blog 3!'). NO need to run .save method for this.
--> To use data from DB instead of temporary data, import the Post class from models.py firl in views.py & pass the query set inplace of value in dictionary.Then the temporary data can be removed.
--> To add Post details in admin page, need to register in admin.py file in app folder. Import Post clÏƒss from models file & TO register,
admin.site.register(Post)

########################## User Registration ##########################
--> It is better to separate user regestration into separate app. Django has a built in form "UserCreationForm". It can be imported from django.contrib.auth.form.
--> 1) Create a new app 
2) Register it in settings.py
3) Import UserCreationForm & create a object & return render with the third parameter as the object.
4) Create a template/app folder & create html file.
5) Map the views file in project urls.py.
To map in urls.py, import views from users directly & use it.
path('register/', views.register, name='register') Note: Now no need to create urls.py in app folder.
--> To alter it properly form.as_p to wrap it in a paragraph tag. 
--> Use {% csrf_token %} for security purpose.
--> To make the website to take our input data, instead of just instantiating the "UserCreationForm", pass request.POST to it.
--> To check whether the inputs are valid, nned to verify them. If it is success, to display a success message, import messages from django.contrib.
--> To redirect the website after signing up, use redirect function from shortcut module.
--> TO save all the changes to DB, use form.save().
--> To display the alert, need to dynamically configure in base.html as well.
--> To add extra fields in registration page (which is not available in "UserCreationForm" by default), need to create new form which inherits from "UserCreationForm".
--> Create a file in users folder (forms.py) & create a class whice inherits from "UserCreationForm".
--> Create a class Meta inside which has two fields. 1) models - which model is going to affected? 2)fields - list of all fileds in register page in order.
--> Now, in views.py, instead of "UserCreationForm", use new form that has been created.
--> To design registration page better, use Crispy forms. Pip install django-crispy-forms.
--> Need to configure it in settings.py file in installed app section - "crispy_forms" & at the bottom - "CRISPY_TEMPLATE_PACK = 'bootstrap4'"
--> In register.html file, load it by {% load crispy_forms_tags %} & instead of as_p, use | crispy to take effect. This will take care of better styling, muted text & better alerts.
